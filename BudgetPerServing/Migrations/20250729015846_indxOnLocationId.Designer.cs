// <auto-generated />
using System;
using System.Collections.Generic;
using BudgetPerServing.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BudgetPerServing.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250729015846_indxOnLocationId")]
    partial class indxOnLocationId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BudgetPerServing.Data.Models.FoodItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AllHighlightFields")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BrandOwner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DataSource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FdcId")
                        .HasColumnType("integer");

                    b.Property<string>("FoodCategory")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GtinUpc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HouseholdServingFullText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MarketCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PackageWeight")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("PublishedDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.Property<double>("ServingSize")
                        .HasColumnType("double precision");

                    b.Property<string>("ServingSizeUnit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<string>>("TradeChannels")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("FoodItems");
                });

            modelBuilder.Entity("BudgetPerServing.Data.Models.FoodNutrient", b =>
                {
                    b.Property<int>("FoodNutrientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FoodNutrientId"));

                    b.Property<string>("DerivationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DerivationDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DerivationId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("FoodItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("FoodNutrientSourceCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FoodNutrientSourceDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FoodNutrientSourceId")
                        .HasColumnType("integer");

                    b.Property<int>("IndentLevel")
                        .HasColumnType("integer");

                    b.Property<int>("NutrientId")
                        .HasColumnType("integer");

                    b.Property<string>("NutrientName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NutrientNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PercentDailyValue")
                        .HasColumnType("integer");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("FoodNutrientId");

                    b.HasIndex("FoodItemId");

                    b.ToTable("FoodNutrient");
                });

            modelBuilder.Entity("BudgetPerServing.Data.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Suite")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("BudgetPerServing.Data.Models.ServingLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("FdcId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Serving")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("ServingLogs");
                });

            modelBuilder.Entity("BudgetPerServing.Data.Models.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("BudgetPerServing.Data.Models.FoodItem", b =>
                {
                    b.HasOne("BudgetPerServing.Data.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BudgetPerServing.Data.Models.FoodNutrient", b =>
                {
                    b.HasOne("BudgetPerServing.Data.Models.FoodItem", null)
                        .WithMany("FoodNutrients")
                        .HasForeignKey("FoodItemId");
                });

            modelBuilder.Entity("BudgetPerServing.Data.Models.Store", b =>
                {
                    b.HasOne("BudgetPerServing.Data.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("BudgetPerServing.Data.Models.FoodItem", b =>
                {
                    b.Navigation("FoodNutrients");
                });
#pragma warning restore 612, 618
        }
    }
}
