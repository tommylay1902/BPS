// <auto-generated />
using System;
using System.Collections.Generic;
using BudgetPerServing.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BudgetPerServing.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250724062200_update_database_3")]
    partial class update_database_3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BudgetPerServing.Data.Models.FoodItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AllHighlightFields")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "allHighlightFields");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "brandName");

                    b.Property<string>("BrandOwner")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "brandOwner");

                    b.Property<string>("DataSource")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "dataSource");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "dataType");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<int>("FdcId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "fdcId");

                    b.Property<string>("FoodCategory")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "foodCategory");

                    b.Property<string>("GtinUpc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "gtinUpc");

                    b.Property<string>("HouseholdServingFullText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "householdServingFullText");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "ingredients");

                    b.Property<string>("MarketCountry")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "marketCountry");

                    b.Property<string>("ModifiedDate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "modifiedDate");

                    b.Property<string>("PackageWeight")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "packageWeight");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("PublishedDate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "publishedDate");

                    b.Property<double>("Score")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "score");

                    b.Property<double>("ServingSize")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "servingSize");

                    b.Property<string>("ServingSizeUnit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "servingSizeUnit");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "shortDescription");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<string>>("TradeChannels")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasAnnotation("Relational:JsonPropertyName", "tradeChannels");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("FoodItems");
                });

            modelBuilder.Entity("BudgetPerServing.Data.Models.FoodNutrient", b =>
                {
                    b.Property<int>("FoodNutrientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "foodNutrientId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FoodNutrientId"));

                    b.Property<string>("DerivationCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "derivationCode");

                    b.Property<string>("DerivationDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "derivationDescription");

                    b.Property<int>("DerivationId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "derivationId");

                    b.Property<Guid?>("FoodItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("FoodNutrientSourceCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "foodNutrientSourceCode");

                    b.Property<string>("FoodNutrientSourceDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "foodNutrientSourceDescription");

                    b.Property<int>("FoodNutrientSourceId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "foodNutrientSourceId");

                    b.Property<int>("IndentLevel")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "indentLevel");

                    b.Property<int>("NutrientId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "nutrientId");

                    b.Property<string>("NutrientName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "nutrientName");

                    b.Property<string>("NutrientNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "nutrientNumber");

                    b.Property<int?>("PercentDailyValue")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "percentDailyValue");

                    b.Property<int>("Rank")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "rank");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "unitName");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "value");

                    b.HasKey("FoodNutrientId");

                    b.HasIndex("FoodItemId");

                    b.ToTable("FoodNutrient");

                    b.HasAnnotation("Relational:JsonPropertyName", "foodNutrients");
                });

            modelBuilder.Entity("BudgetPerServing.Data.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Suite")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("BudgetPerServing.Data.Models.ServingLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("FdcId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Serving")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("ServingLogs");
                });

            modelBuilder.Entity("BudgetPerServing.Data.Models.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("BudgetPerServing.Data.Models.FoodItem", b =>
                {
                    b.HasOne("BudgetPerServing.Data.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BudgetPerServing.Data.Models.FoodNutrient", b =>
                {
                    b.HasOne("BudgetPerServing.Data.Models.FoodItem", null)
                        .WithMany("FoodNutrients")
                        .HasForeignKey("FoodItemId");
                });

            modelBuilder.Entity("BudgetPerServing.Data.Models.FoodItem", b =>
                {
                    b.Navigation("FoodNutrients");
                });
#pragma warning restore 612, 618
        }
    }
}
